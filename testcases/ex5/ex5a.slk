data ch_star{
    int val;
}.

pred arr_seg<n>     == self::ch_star<_> & n=1
                      or (exists q: self::ch_star<_> * q::arr_seg<n-1> & q = self + 1 & n > 1) 
  inv n>=1.

pred int_block<>    == self::arr_seg<4>.

pred int_arr_seg<n> == self::int_block<>  & n=4
                    or self::int_block<> * q::int_arr_seg<n-4> & q = self + 4 & n > 1
  inv n>=1.

/*
checkentail x::int_block<p> |- x::arr_seg<p,4>.
print residue.
expect Valid.
*/

checkentail x::ch_star<_> 
           |- x::arr_seg<1>.
print residue.
expect Valid.

checkentail x::arr_seg<2> & y=x+1 |- x::ch_star<_> * y::ch_star<_>. 
print residue.
expect Valid.

checkentail x::ch_star<_> * y::arr_seg<n> & y = x+1 
           |- x::arr_seg<n+1>.
print residue.
expect Valid.

checkentail x::ch_star<_> * y::arr_seg<n> & n=1 & y = x+1 
           |- x::arr_seg<n+1>.
print residue.
expect Valid.

checkentail x::ch_star<_> * y::arr_seg<n> & y = x+1 
           |- x::arr_seg<m>.
print residue.
expect Valid.


checkentail x::ch_star<_> * y::arr_seg<n> & y = x+1 
           |- x::arr_seg<n+2>.
print residue.
expect Valid.

checkentail x::ch_star<_> * y::ch_star<_> & y = x+1 
           |- x::arr_seg<2>.
print residue.
expect Valid.


/*
checkentail x::ch_star<_> * y::ch_star<_> * z::ch_star<_> & y = x+1 & z = y+1 & z = x+2 & z=p
           |- x::arr_seg<p,3>.
print residue.
expect Valid.
*/

//checkentail x::ch_star<_> * y::ch_star<_> //* z::ch_star<_> * p::ch_star<_>
//            & y = x+1 & z = x+2 & p = x+3
//           |- x::arr_seg<p,4>.
//print residue.
//expect Valid.
